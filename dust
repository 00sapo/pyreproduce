#!/bin/env sh

# POSIX-compliant script for setting up your shell
thisdir=$(realpath $(dirname $0))
DUSTDIR=${thisdir}/dustenv
PYENVDIR=${DUSTDIR}/pyenv
. ${DUSTDIR}/pyenv-source.sh

setup_pypackages() {
  if test $1 = "pdm"
  then
    export PYTHONPATH="$(pdm info --packages)/lib:$PYTHONPATH"
  else
    export PYTHONPATH="$(pyenv prefix)/lib:$PYTHONPATH"
  fi
}

# get the dust mode
mode=$(cat .dust-mode 2>/dev/null)
if test -z $mode; then echo "Please, set a mode and/or run ./install.sh"; exit; fi

if test "$1" = "toggle"
then
  case $mode in
    "pdm")
      mode="pip"
      rm pyproject.toml
      rm pdm.lock
      rm .pdm.toml
      ;;
    "pip")
      mode="pdm"
      ;;
  esac
  echo $mode > .dust-mode
  ./install.sh
  exit
fi

# backup status of installed packages for later
pypackages_before=$(ls -lR ${thisdir}/__pypackages__/ 2>/dev/null)
pyenv_before=$(ls -lR $(pyenv prefix)/lib/ 2>/dev/null)

# special command: fly
if test "$1" = "fly"
then
  setup_pypackages $mode
  "${@:2}"
# special command: shell
elif test "$1" = "shell"
then
  shell=$(cat /proc/$PPID/comm)
  # removing link (e.g. sh -> /usr/bin/bash)
  shell=$(basename $(realpath $(which $shell))) 
  # shell_command=$(cat /proc/$PPID/cmdline)
  setup_pypackages $mode
  if test "$shell" = "fish"
  then
    pyenv exec $shell -C "source ${DUSTDIR}/pyenv-source.fish $PYENVDIR"
  elif test "$shell" = "bash" 
  then
    pyenv exec $shell --init-file <(echo "source ${DUSTDIR}/pyenv-source.sh $PYENVDIR")
  else
    echo "Sorry, we cannot spawn your shell: only fish and bash supported."
  fi
else
  # run the command with pdm if it is installed
  case $mode in
    "pdm")
      pdm "$@"
      ;;
    "pip")
      pyenv exec pip "$@"
      ;;
    *)
  esac
fi

# check if some package was modified
pypackages_after=$(ls -lR ${thisdir}/__pypackages__/ 2>/dev/null)
pyenv_after=$(ls -lR $(pyenv prefix)/lib/ 2>/dev/null)
if [ "$pypackages_before" != "$pypackages_after" ] || [ "$pyenv_after" != "$pyenv_before" ]; then
  echo "DUST MESSAGE: Detected changes, updating requirements.txt"
  case $mode in
    "pdm")
      pdm export > requirements.txt 2>/dev/null
      pyenv exec pip freeze >> requirements.txt 2>/dev/null
      ;;
    "pip")
      pyenv exec pip freeze > requirements.txt 2>/dev/null
      ;;
    *)
  esac
fi

if test $ERROR
then
  echo "Some error happened! Have you run 'install.sh'?"
  exit 1
fi
